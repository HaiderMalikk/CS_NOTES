* Stack vs Heap
================================================================================================
The stack and the heap are two key memory areas used by programs to store data during execution
- Definition:
Stack: Used for statically allocated memory (e.g., local variables).
Heap: Used for dynamically allocated memory (e.g., objects).
- Management:
Stack: Managed automatically with LIFO order.
Heap: Managed manually or via garbage collection.
- Speed:
Stack: Faster due to simple allocation/deallocation.
Heap: Slower due to complex allocation and fragmentation.
- Memory Size:
Stack: Smaller, limited by OS (few MBs).
Heap: Larger, limited by available RAM.
- Scope and Lifetime:
Stack: Local scope; lifetime ends when function returns.
Heap: Global scope; lifetime persists until explicitly freed.
- Use Cases:
Stack: Function-local variables, parameters, and call info.
Heap: Dynamic data structures like trees, graphs, or large arrays.
- Common Errors:
Stack: Stack overflow from deep recursion or large variables.
Heap: Memory leaks and dangling pointers from poor memory management.
- Example:
Stack: int a = 10; (deallocated automatically).
Heap: int *b = malloc(sizeof(int)); (must be explicitly freed)

* Garbage Collection
================================================================================================
Garbage collection (GC) is a process by which a programming language's runtime environment 
automatically manages memory by reclaiming unused memory, preventing memory leaks, 
and freeing the developer from manually managing memory allocation and deallocation.
and EX of unused memory can be a variable that is None or a obj that has no reference to it (unreachable obj)
NOTE!: languages like python and java have GC's but language like c, c++ dont have GC's and you must manually manage memory.
There are 3 main ways GC's free up memory.
1. Reference Counting (Used in Python)
How it works:
Each object has a reference count, which tracks the number of references pointing to it.
When an object’s reference count drops to zero, it is immediately deallocated.
EX:
a = [1,2,3]  
b = a  # now 'a' has 1 ref, so the system ref count is 2 (a and b)  
b = None  # 'b' is removed, memory is freed up, and ref count is just 1 for 'a'  
Pros:Fast and simple
Cons:Cannot handle circular references (meaning objects pointing to each other will never be freed).
To FIx circular reference different languages use difference methods
2. Tracing Garbage Collection (Mark and Sweep - Used in Java, Python as backup GC)
How it works:
Instead of tracking reference counts, the system starts from root objects (like global variables and stack frames) and marks all reachable objects.
Mark phase: Marks all objects that are still accessible.
Sweep phase: Deletes unmarked (unreachable) objects and reclaims memory.
EX (non circular i.e simple unreachable objects):
Node a = new Node(1);
Node b = new Node(2);
a.next = b;
a = null; // 'a' is now unreachable and is deleted as nothing points to it 
System.gc(); // GC detects 'a' is unreachable and frees its memory  
The GC sees b still has a reference (from a.next), so it remains in memory (unless also unreachable).
EX (Circular i.e island of objects):
a.ref = b;  // a → b
b.ref = a;  // b → a (circular reference)
a = null;
b = null;  // Both objects form an "island" but are unreachable from GC roots i.e they are unreachable from outside the island and are deleted 
Even though they reference each other, both are unreachable from GC roots (like local variables or global references).
Pros:Can handle circular references
Cons:GC runs periodically, which can cause pauses in execution.
NOTE: Tracing GC can remove island of objects i.e a group of objects that refer to each other but are no longer reachable from anywhere outside the island
3. Generational Garbage Collection (Used in Java, Python, most modern GCs)
How it works:
Objects are divided into Young Generation, Old Generation, and sometimes a Permanent Generation.
Most objects die young, so the GC runs frequent minor collections in the Young Gen.
Objects that survive multiple GCs get promoted to the Old Gen, which is collected less frequently.
EX:
System.gc(); // Suggests running GC, which will prioritize short-lived objects in Young Gen  
Pros:Efficient for short-lived objects (fast cleanup)
Cons:Can cause performance issues if not tuned properly.

EX LL GC:
when deleting the first node in a Singly LL we do self.head = self.head.ref essentially skiping over the node marking our new first node as self.head.ref and deleting 
the first node self.head, but the node object still exists until the GC frees it which is dose. Since there is no reference to our initial first node that was
originaly self.head (i.e our deleted node) this means that node obj can be deleted since it is unreachable, BUT as we saw in the EX above self.head.ref
i.e our new first node obj stays it is NOT deleted this is beacuse it still has references pointing too it, (1) from self.head pointer which now points to this new node obj 
and (2) from the deleted node obj, remember that the original self.head (i.e the deleted node obj our initial first node) pointed to the next node self.head.ref (which is now our new first node)
meaning that the initial frist node still points to the new node via its ref.
but since the initial first node obj will be deleted self.head.ref (our new first node) will then have only 1 ref to it after the GC's sweep, in the sweep it will see two refs
to self.head.ref originally after deleting the intial frist node which is unreachable there will be one ref to self.head.ref which is from the self.head pointer.
So in short the self.head is a pointer, after we change it to self.head.ref nothing points to the inital first node that self.head was pointing too, this means that initial first node is deleted 
by the GC and now the self.head points to the new first node obj, since the initial first node is deleted its reference to the new first node is lost giving the new node only 1 ref self.head 
QUICK NOTE: all the other nodes in teh LL still have a reference from there prev node so they are all still in memory even through self.head pointer is not pointing too them

* Primitive vs Reference Types
================================================================================================
Primitive types are value types that are stored on the stack (faster), while reference types are stored on the heap (slower)
- Definition:
Primitive types: Integers, floats, booleans, etc. Fixed memory size, default can be 0 etc etc cannot be none. 
Reference types: Objects, arrays, strings, etc. Dynamic memory size, are objects and default is none.

* Pointers
================================================================================================
A pointer is a variable that stores the memory address of another variable. 
Pointers are fundamental in languages like C, C++, and others that give you direct access to memory
EX:
int *ptr;  // Declares a pointer to an integer in C
int x = 10;
int *ptr = &x;  // ptr now holds the address of x
EX: pointers allow to allocate and free memory at runtime
int *ptr = (int *)malloc(sizeof(int));  // Allocates memory
*ptr = 42;
free(ptr);  // Frees the allocated memory

* compile time vs runtime
=============================================
### Overview
In programming, there are two main times when code is executed: compile time and runtime.
### Compile Time
Compile time is the time when the code is compiled into machine code.
This is the time when the code is checked for errors and warnings related to syntax and type mismatch
EX's
System.out.println("Hello, World!) # this will give a compile time error because of the missing ;
int x = 10;  // Value of x is known at compile-time and the type is also known at compile time so this dose not give any error.
### Runtime
Runtime is the time when the code is executed by the computer.
This is the time when the code is checked for errors and warnings related to logic ot data like: invalid user input or unavailable resources.
EX:
int arr = {1,2,3}; int x = arr[5]; // this will give a runtime error because the array index is out of bounds.
int y = (int) (Math.random() * 100);  // Random value generated at runtime
- SUMMARY: the compiler converts the array to machine code and gives x the value of index at 5 is there is no syntax or type error in the code
           the ex runs at compile time not knowing that at arr[5] there is nothing at runtime the value is determined for x where are[5] DNE and error is thown at runtime.

* Strongly Typed vs Weakly Typed Languages or Static vs Dynamic Typing
=============================================
### Overview
In programming, languages can be classified into two main categories: strongly typed and weakly typed. The
difference between these two lies in how the language handles data types.
### Strongly Typed Languages
In strongly typed languages, the data type of a variable is known at compile time. 
This means that we must declare the data type of a variable before using it. If we try to assign a value of the wrong type to a variable, the compiler will throw an error. 
EX: in java we say int x = 5; here x is of type int and we can't asign a string to x. here x is a static type it cant be changed at runtime.
### Weakly Typed Language
In weakly typed languages, the data type of a variable is determined at runtime.
This means that we do not need to declare the data type of a variable before using it and its type will automaticly be determined when we assign a value to it.
# EX: in python we say x = 5; here x is of type int but we can also say x = "hello, here x is a Dynamic type it can be changed at runtime.

* Compiled vs Interpreted Languages
=============================================
### Overview
In programming, languages can be classified into two main categories: compiled and interpreted. The
difference between these two lies in how the code is executed.
### Compiled Languages
In compiled languages, the code is first compiled into machine code before it is executed.
This means that the code is converted into a format that the computer's processor can understand.
EX: java, c, c++
### Interpreted Languages
In interpreted languages, the code is not compiled into machine code before it is executed.
Instead, the code is interpreted line by line by an interpreter then this interpreter will convert the code into machine code.
EX: python, ruby, javascript

*  High -Level vs Low-Level Languages
=============================================
### Overview
In programming, languages can be classified into two main categories: high-level and low-level. The
difference between these two lies in how close the language is to the computer's hardware.
### High-Level Languages
In high-level languages, the language is far away from the computer's hardware.
This means that the language is designed to be easy to use and understand, but it may not be
as efficient as low-level languages.
EX: python, java, c#
### Low-Level Languages
In low-level languages, the language is close to the computer's hardware.
This means that the language is designed to be efficient and fast, but it may be difficult to use
and understand.
EX: assembly, c, c++

* Order of variables and Alignment in memory
=============================================
### Overview 
the order of variables can effect the alignment of variables in memory this can make them more or less efficient.
by adding padding to the varibles we waste memory trying to align the variables to the next word boundary.
by the order i mean whats order of decloration, this is best demostrated with a EX:
### Bad alignment 
struct MyStuct{
    char myChar; // 1 byte
    int myInt; // 4 bytes
}
here we must add 3 bytes of padding after char to align it with the next var because of the ofset 
the memory is stored in increments here 4bytes and there theres nothing after the first byte of char so we must add padding
so that we store int at the correct place (4bytes after char) and hence we must add padding after char to do so 
now each variable has 4 bytes to itself in 4byte incremetns meaning each var takes up 4 bytes in memory 
amd hence we can move up by 4byte ofsets to get to the next var.
so this might look like:
mychar = 1 byte
padding = 3byte
myint = 4 byte
### good alignment
struct MyStuct{
    int myInt; // 4 bytes
    char myChar; // 1 byte
}
in this case the char is available right after the integer because the integer is 4 bytes and the char is 1 byte so the char is right after
no padding is needed the code is faster and more efficient.

* Function vs Property for methods on str,int,list etc
======================================================
- A function is denoted with () after its name
- A property is denoted with no () after its name
EX
mystr = "Hello"
mystr.upper() # this is a function
mystr.upper   # this is a property

* In place vs out of place operations
=====================================
- In place operations are operations that change the original object
- Out of place operations are operations that return a new object and leave the original object unchanged
EX
mylist = [1,2,3]
mylist.sort() # in place operation as we dont create a new list and modify the existing one (in place)
mylist = sorted(mylist) # out of place operation as we create a new list and leave the original one unchanged

* Primitive Operations:
======================
- Primitive operations are operations that are simple and can be performed in a single step like variable assignments or indexing array or (simple method) 
- Non primitive operations are operations that are complex and can be performed in multiple steps like sorting or searching or (complex method)
-- The running time of a algorithim can be Calculated by counting the number of primitive operations it performs 