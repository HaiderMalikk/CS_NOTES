- Software Design Principles =======================================================================================================================
1. SOLID Principles
The SOLID principles are five core guidelines for object-oriented design that help make software more maintainable and scalable.

S - Single Responsibility Principle (SRP)

üëâ A class should have only one reason to change (i.e., it should only have one job).

‚ùå Bad Example: (A class handling both user authentication and file logging)

public class User {
    public void login(String username, String password) { /* logic */ }
    public void logToFile(String message) { /* logic */ }
}
‚úÖ Better Example: (Separate concerns into different classes)

public class Authenticator {
    public void login(String username, String password) { /* logic */ }
}

public class Logger {
    public void logToFile(String message) { /* logic */ }
}
üîπ Why? If logging changes, you don‚Äôt want to modify the User class. This keeps things modular.

O - Open/Closed Principle (OCP)

üëâ Software entities (classes, modules, functions) should be open for extension but closed for modification.

‚ùå Bad Example: (Modifying existing code to add a new feature)

public class PaymentProcessor {
    public void processPayment(String type) {
        if (type.equals("creditCard")) { /* process credit card */ }
        else if (type.equals("paypal")) { /* process PayPal */ }
    }
}
‚úÖ Better Example: (Using polymorphism to extend functionality without modifying the class)

interface Payment {
    void process();
}

class CreditCardPayment implements Payment {
    public void process() { /* process credit card */ }
}

class PayPalPayment implements Payment {
    public void process() { /* process PayPal */ }
}

class PaymentProcessor {
    public void processPayment(Payment payment) {
        payment.process();
    }
}
üîπ Why? If a new payment method is needed, we can just add another class without modifying existing code.

L - Liskov Substitution Principle (LSP)

üëâ Subtypes should be replaceable by their base types without breaking functionality.

‚ùå Bad Example: (Subclass breaks the expected behavior of the base class)

class Rectangle {
    protected int width, height;
    public void setWidth(int width) { this.width = width; }
    public void setHeight(int height) { this.height = height; }
}

class Square extends Rectangle {
    public void setWidth(int width) { this.width = this.height = width; }
    public void setHeight(int height) { this.width = this.height = height; }
}
‚úÖ Better Example: (Avoid inheritance when it breaks expected behavior)

interface Shape {
    int getArea();
}

class Rectangle implements Shape {
    private int width, height;
    public Rectangle(int width, int height) { this.width = width; this.height = height; }
    public int getArea() { return width * height; }
}

class Square implements Shape {
    private int side;
    public Square(int side) { this.side = side; }
    public int getArea() { return side * side; }
}
üîπ Why? The Square should not inherit from Rectangle because it violates the expected behavior of width and height being independent.

I - Interface Segregation Principle (ISP)

üëâ A class should not be forced to implement methods it does not use.

‚ùå Bad Example: (A large interface forces unnecessary method implementations)

interface Worker {
    void work();
    void eat();
}

class Robot implements Worker {
    public void work() { /* logic */ }
    public void eat() { throw new UnsupportedOperationException(); } // Robots don't eat
}
‚úÖ Better Example: (Split interfaces based on responsibilities)

interface Workable {
    void work();
}

interface Eatable {
    void eat();
}

class Robot implements Workable {
    public void work() { /* logic */ }
}
üîπ Why? The Robot class is not forced to implement eat(), which makes the design cleaner.

D - Dependency Inversion Principle (DIP)

üëâ High-level modules should not depend on low-level modules. Instead, both should depend on abstractions.

‚ùå Bad Example: (Tightly coupled dependency)

class MySQLDatabase {
    public void save(String data) { /* logic */ }
}

class Service {
    private MySQLDatabase database = new MySQLDatabase();
    public void saveData(String data) { database.save(data); }
}
‚úÖ Better Example: (Depend on abstractions, not concrete classes)

interface Database {
    void save(String data);
}

class MySQLDatabase implements Database {
    public void save(String data) { /* logic */ }
}

class Service {
    private Database database;
    public Service(Database database) { this.database = database; }
    public void saveData(String data) { database.save(data); }
}
üîπ Why? Now we can switch from MySQLDatabase to another database without modifying Service.

2. DRY (Don‚Äôt Repeat Yourself)
üëâ Avoid duplicating code by using functions, inheritance, or reusable components.

‚ùå Bad Example: (Duplicate logic in multiple places)

class User {
    public void greet() {
        System.out.println("Hello, " + name);
    }
}

class Admin {
    public void greet() {
        System.out.println("Hello, " + name);
    }
}
‚úÖ Better Example: (Use inheritance or composition)

class Person {
    protected String name;
    public void greet() {
        System.out.println("Hello, " + name);
    }
}

class User extends Person { }
class Admin extends Person { }
üîπ Why? No repeated code, making maintenance easier.

3. KISS (Keep It Simple, Stupid)
üëâ Write code that is simple and easy to understand. Avoid unnecessary complexity.

‚ùå Bad Example: (Over-engineering with unnecessary design patterns)

class SingletonFactory {
    private static SingletonFactory instance = new SingletonFactory();
    public static SingletonFactory getInstance() { return instance; }
}
‚úÖ Better Example: (Use a simple solution)

public class Singleton {
    private static final Singleton instance = new Singleton();
    public static Singleton getInstance() { return instance; }
}
üîπ Why? Simpler code is easier to read, debug, and maintain.

4. YAGNI (You Ain‚Äôt Gonna Need It)
üëâ Don‚Äôt add features unless you actually need them.

‚ùå Bad Example: (Adding unnecessary complexity for "future-proofing")

public class OrderProcessor {
    public void processOrder(Order order) {
        if (order.isExpress() || order.isInternational() || order.isGiftWrapped()) {
            // Unnecessary complexity for unsupported features
        }
    }
}
‚úÖ Better Example: (Add features when needed, not before)

public class OrderProcessor {
    public void processOrder(Order order) { /* Basic logic */ }
}
üîπ Why? Writing extra code before it‚Äôs needed wastes time and increases complexity.

Conclusion
Using these software design principles (SOLID, DRY, KISS, YAGNI, and Dependency Inversion) makes your code cleaner, more maintainable, and scalable. They help prevent spaghetti code, tight coupling, and unnecessary complexity. üöÄ

- Software Design Patterns: =======================================================================================================
1. Singleton Pattern
Example: Database Connection Manager
A database connection manager ensures that only one connection instance exists to avoid redundant connections.

Java Example:

public class DatabaseConnection {
    private static DatabaseConnection instance;

    private DatabaseConnection() {} // Private constructor

    public static synchronized DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }
}
This ensures only one instance of DatabaseConnection exists.

2. Builder Pattern
Example: Creating a Complex User Object
Useful for constructing objects with multiple optional parameters.

Java Example:

public class User {
    private String name;
    private int age;
    private String email;

    private User(UserBuilder builder) {
        this.name = builder.name;
        this.age = builder.age;
        this.email = builder.email;
    }

    public static class UserBuilder {
        private String name;
        private int age;
        private String email;

        public UserBuilder(String name) {
            this.name = name;
        }

        public UserBuilder age(int age) {
            this.age = age;
            return this;
        }

        public UserBuilder email(String email) {
            this.email = email;
            return this;
        }

        public User build() {
            return new User(this);
        }
    }
}

// Usage
User user = new User.UserBuilder("Alice").age(25).email("alice@example.com").build();
This allows flexible object creation without needing multiple constructors.

3. Factory Pattern
Example: Shape Factory
Useful for centralizing object creation logic.

Java Example:

interface Shape {
    void draw();
}

class Circle implements Shape {
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}

class Rectangle implements Shape {
    public void draw() {
        System.out.println("Drawing a Rectangle");
    }
}

class ShapeFactory {
    public static Shape getShape(String type) {
        if (type.equalsIgnoreCase("CIRCLE")) {
            return new Circle();
        } else if (type.equalsIgnoreCase("RECTANGLE")) {
            return new Rectangle();
        }
        return null;
    }
}

// Usage
Shape shape = ShapeFactory.getShape("CIRCLE");
shape.draw();
The factory abstracts object creation logic.

4. Facade Pattern
Example: Home Theater System
Simplifies complex system interactions.

Java Example:

class Amplifier {
    void on() { System.out.println("Amplifier On"); }
}

class DVDPlayer {
    void play() { System.out.println("Playing DVD"); }
}

class Projector {
    void on() { System.out.println("Projector On"); }
}

class HomeTheaterFacade {
    private Amplifier amp;
    private DVDPlayer dvd;
    private Projector projector;

    public HomeTheaterFacade(Amplifier amp, DVDPlayer dvd, Projector projector) {
        this.amp = amp;
        this.dvd = dvd;
        this.projector = projector;
    }

    public void watchMovie() {
        amp.on();
        projector.on();
        dvd.play();
        System.out.println("Movie started!");
    }
}

// Usage
HomeTheaterFacade homeTheater = new HomeTheaterFacade(new Amplifier(), new DVDPlayer(), new Projector());
homeTheater.watchMovie();
This hides the complexity behind a single method call.

5. Adapter Pattern
Example: Using a Different Voltage Charger
Converts one interface into another expected by the client.

Java Example:

interface USPlug {
    void plugIn();
}

class USCharger implements USPlug {
    public void plugIn() {
        System.out.println("Using US Charger");
    }
}

// Adapter to use US charger in Europe
class EUAdapter implements USPlug {
    private EuropeanPlug europeanPlug;

    public EUAdapter(EuropeanPlug europeanPlug) {
        this.europeanPlug = europeanPlug;
    }

    public void plugIn() {
        europeanPlug.connect();
    }
}

class EuropeanPlug {
    void connect() {
        System.out.println("Using European Charger");
    }
}

// Usage
USPlug charger = new EUAdapter(new EuropeanPlug());
charger.plugIn();
Allows using an incompatible interface.

6. Strategy Pattern
Example: Different Payment Methods
Encapsulates algorithms and allows switching strategies dynamically.

Java Example:

interface PaymentStrategy {
    void pay(int amount);
}

class CreditCardPayment implements PaymentStrategy {
    public void pay(int amount) {
        System.out.println("Paid $" + amount + " using Credit Card.");
    }
}

class PayPalPayment implements PaymentStrategy {
    public void pay(int amount) {
        System.out.println("Paid $" + amount + " using PayPal.");
    }
}

class ShoppingCart {
    private PaymentStrategy paymentStrategy;

    public ShoppingCart(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    public void checkout(int amount) {
        paymentStrategy.pay(amount);
    }
}

// Usage
ShoppingCart cart = new ShoppingCart(new PayPalPayment());
cart.checkout(100);
Allows switching between different payment methods dynamically.

7. Observer Pattern
Example: Stock Price Updates
Allows multiple subscribers to react to state changes.

Java Example:

import java.util.ArrayList;
import java.util.List;

interface Observer {
    void update(float price);
}

class Stock {
    private List<Observer> observers = new ArrayList<>();
    private float price;

    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    public void setPrice(float price) {
        this.price = price;
        notifyObservers();
    }

    private void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(price);
        }
    }
}

class Investor implements Observer {
    private String name;

    public Investor(String name) {
        this.name = name;
    }

    public void update(float price) {
        System.out.println(name + " notified of stock price change: $" + price);
    }
}

// Usage
Stock stock = new Stock();
Investor investor1 = new Investor("Alice");
Investor investor2 = new Investor("Bob");

stock.addObserver(investor1);
stock.addObserver(investor2);
stock.setPrice(150.75f);
Notifies multiple investors when stock price changes.

Conclusion

Each design pattern provides a structured solution to common software development challenges:

Singleton ‚Üí Ensures a single instance.
Builder ‚Üí Simplifies complex object creation.
Factory ‚Üí Centralizes object creation.
Facade ‚Üí Provides a simplified interface.
Adapter ‚Üí Enables integration of incompatible interfaces.
Strategy ‚Üí Allows dynamic algorithm switching.
Observer ‚Üí Implements a publish-subscribe mechanism.
By mastering these patterns, developers can write cleaner, reusable, and more maintainable code. 

* Other Design Patterns

1. Prototype Pattern (Creational)
‚úÖ Purpose: Creates new objects by copying an existing object instead of creating from scratch.
üîπ Use Case: Cloning objects with expensive initialization (e.g., game character templates, database records).

Example (Java)

class Prototype implements Cloneable {
    String data;

    public Prototype(String data) {
        this.data = data;
    }

    public Prototype clone() throws CloneNotSupportedException {
        return (Prototype) super.clone();
    }
}
2. Abstract Factory Pattern (Creational)
‚úÖ Purpose: Creates families of related objects without specifying their concrete classes.
üîπ Use Case: UI libraries that support multiple themes, or different database connections (MySQL, PostgreSQL).

3. Composite Pattern (Structural)
‚úÖ Purpose: Treats individual objects and compositions of objects uniformly (tree structures).
üîπ Use Case: File systems (folders contain files & subfolders), UI components (buttons, panels).

4. Decorator Pattern (Structural)
‚úÖ Purpose: Dynamically adds behavior to objects without modifying their code.
üîπ Use Case: Adding features to UI components (scrollbars, borders), extending functionality in libraries.

Example (Java)

interface Coffee {
    String getDescription();
}

class SimpleCoffee implements Coffee {
    public String getDescription() { return "Simple Coffee"; }
}

class MilkDecorator implements Coffee {
    private Coffee coffee;
    
    public MilkDecorator(Coffee coffee) { this.coffee = coffee; }

    public String getDescription() {
        return coffee.getDescription() + ", Milk";
    }
}
5. Proxy Pattern (Structural)
‚úÖ Purpose: Provides a placeholder to control access to another object (lazy loading, security, logging).
üîπ Use Case: Virtual proxy for expensive objects (image loading), security access control.

6. Command Pattern (Behavioral)
‚úÖ Purpose: Encapsulates requests as objects, allowing undo/redo and queueing of commands.
üîπ Use Case: Implementing undo in text editors, home automation (commands for lights, fans).

7. State Pattern (Behavioral)
‚úÖ Purpose: Allows an object to change its behavior based on its state.
üîπ Use Case: Traffic lights, vending machines, game character states.

8. Mediator Pattern (Behavioral)
‚úÖ Purpose: Reduces direct dependencies between objects by introducing a mediator for communication.
üîπ Use Case: Chatroom apps (messages pass through a central mediator).

9. Chain of Responsibility Pattern (Behavioral)
‚úÖ Purpose: Passes requests through a chain of handlers until one handles it.
üîπ Use Case: Logging frameworks, event processing in GUIs.


- Readable Code ============================================================================================================================
Examples for The 3 Laws of Writing Readable Code
1. Avoid Deep Nesting
Bad Example:

public void process(int num) {
    if (num > 0) {
        if (num % 2 == 0) {
            if (num < 100) {
                System.out.println("Valid number");
            } else {
                System.out.println("Too large");
            }
        } else {
            System.out.println("Not an even number");
        }
    } else {
        System.out.println("Invalid number");
    }
}
Improved Example (Flattening the Code):

public void process(int num) {
    if (num <= 0) {
        System.out.println("Invalid number");
        return;
    }
    
    if (num % 2 != 0) {
        System.out.println("Not an even number");
        return;
    }
    
    if (num >= 100) {
        System.out.println("Too large");
        return;
    }
    
    System.out.println("Valid number");
}
üëâ Why?

Eliminates deep nesting by inverting conditions.
Makes the flow of logic easier to follow.
Reduces cognitive load for future developers.
2. Reduce Code Duplication
Bad Example (Duplicate Logic in Multiple Places):

public int calculateDiscountForRegularUser(int price) {
    return price - (price * 10 / 100);
}

public int calculateDiscountForPremiumUser(int price) {
    return price - (price * 20 / 100);
}
Improved Example (Extracting Common Logic):

public int calculateDiscount(int price, int discountPercentage) {
    return price - (price * discountPercentage / 100);
}
Now it can be used like this:

int regularUserPrice = calculateDiscount(1000, 10);
int premiumUserPrice = calculateDiscount(1000, 20);
üëâ Why?

Avoids repeating similar logic in multiple places.
Reduces maintenance effort‚Äîif discount calculation changes, you only update one function.
3. Use Meaningful Naming
Bad Example:

public int c(int a, int b) {
    return a * b;
}
Improved Example:

public int calculateArea(int width, int height) {
    return width * height;
}
üëâ Why?

The function name clearly conveys its purpose.
The parameter names (width and height) provide context.
Improves readability for future developers.

4. Keep Functions Short & Focused (Single Responsibility Principle - SRP)
üëâ A function should do one thing and do it well.

‚ùå Bad Example: (One function doing too much)

public void processOrder(Order order) {
    validateOrder(order);
    calculateDiscount(order);
    sendConfirmationEmail(order);
    updateInventory(order);
}
‚úÖ Better Example: (Each function has a single responsibility)

public void processOrder(Order order) {
    validateOrder(order);
    applyDiscount(order);
    confirmOrder(order);
    updateStock(order);
}
Now, each step can have its own function:

private void validateOrder(Order order) { /* logic */ }
private void applyDiscount(Order order) { /* logic */ }
private void confirmOrder(Order order) { /* logic */ }
private void updateStock(Order order) { /* logic */ }
üîπ Why? Breaking code into smaller functions makes it easier to read, test, and debug.

5. Use Consistent Formatting & Style
üëâ Well-formatted code is easier to read.

‚ùå Bad Example: (Inconsistent spacing, indentation, and curly brace placement)

if(isActive){System.out.println("Active");}else{System.out.println("Inactive");}
‚úÖ Better Example: (Consistent formatting)

if (isActive) {
    System.out.println("Active");
} else {
    System.out.println("Inactive");
}
üîπ Why? Consistent formatting improves readability and prevents confusion. Most IDEs can automatically format code.

6. Limit the Number of Parameters in Functions
üëâ Too many parameters make a function hard to use and remember.

‚ùå Bad Example: (Too many parameters)

public void createUser(String name, String email, String password, String address, int age, String phone) { ... }
‚úÖ Better Example: (Encapsulate parameters into a class)

public void createUser(User user) { ... }
üîπ Why? Using objects instead of multiple parameters makes function calls cleaner and more readable.

7. Avoid Hardcoding Values (Use Constants)
üëâ Magic numbers and strings make code unclear.

‚ùå Bad Example: (Hardcoded value)

if (discountType == 1) { applyDiscount(10); } // What is "1"?
‚úÖ Better Example: (Using named constants)

private static final int STUDENT_DISCOUNT = 1;

if (discountType == STUDENT_DISCOUNT) { applyDiscount(10); }
üîπ Why? This makes the code self-documenting‚Äîyou don‚Äôt need to guess what 1 means.

8. Use Early Returns Instead of Nested Conditions
üëâ Reduces unnecessary nesting and makes the flow clearer.

‚ùå Bad Example: (Nested if-else statements)

public void processUser(User user) {
    if (user != null) {
        if (user.isActive()) {
            if (!user.isBanned()) {
                System.out.println("Processing user");
            } else {
                System.out.println("User is banned");
            }
        } else {
            System.out.println("User is inactive");
        }
    } else {
        System.out.println("User is null");
    }
}
‚úÖ Better Example: (Use early returns)

public void processUser(User user) {
    if (user == null) {
        System.out.println("User is null");
        return;
    }
    if (!user.isActive()) {
        System.out.println("User is inactive");
        return;
    }
    if (user.isBanned()) {
        System.out.println("User is banned");
        return;
    }
    
    System.out.println("Processing user");
}
üîπ Why?

No unnecessary else statements.
Each condition exits early, reducing nested levels.
The main logic is at the bottom and easy to find.
9. Use Comments Wisely (Explain Why, Not What)
üëâ Comments should explain reasoning, not obvious code.

‚ùå Bad Example: (Useless comment)

// This checks if the user is active
if (user.isActive()) { ... }
‚úÖ Better Example: (Explain why something is done)

// Only allow active users to proceed with checkout
if (user.isActive()) { ... }
üîπ Why? Comments should add value, not describe things that are already clear.

10. Use Meaningful Booleans in Function Calls
üëâ Avoid passing true or false directly‚Äîuse named constants or methods.

‚ùå Bad Example:

sendEmail("test@example.com", false);
‚úÖ Better Example:

sendEmail("test@example.com", /* isHtml */ false);
Or even better:

sendPlainTextEmail("test@example.com");
sendHtmlEmail("test@example.com");
üîπ Why? It‚Äôs easier to understand the function call without checking the method definition.


